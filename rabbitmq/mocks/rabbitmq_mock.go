// Code generated by MockGen. DO NOT EDIT.
// Source: ./rabbitmq.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	rabbitmq "github.com/iamgoangle/pkg/rabbitmq"
	amqp "github.com/streadway/amqp"
	reflect "reflect"
)

// MockConnection is a mock of Connection interface
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Use mocks base method
func (m *MockConnection) Use(handler rabbitmq.HandlerFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use", handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Use indicates an expected call of Use
func (mr *MockConnectionMockRecorder) Use(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockConnection)(nil).Use), handler)
}

// Close mocks base method
func (m *MockConnection) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// ApplyUse mocks base method
func (m *MockConnection) ApplyUse(handler ...rabbitmq.HandlerFunc) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range handler {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplyUse", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyUse indicates an expected call of ApplyUse
func (mr *MockConnectionMockRecorder) ApplyUse(handler ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyUse", reflect.TypeOf((*MockConnection)(nil).ApplyUse), handler...)
}

// ExchangeDeclare mocks base method
func (m *MockConnection) ExchangeDeclare(name, kind string, durable, autoDelete, internal, noWait bool, args amqp.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclare", name, kind, durable, autoDelete, internal, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare
func (mr *MockConnectionMockRecorder) ExchangeDeclare(name, kind, durable, autoDelete, internal, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockConnection)(nil).ExchangeDeclare), name, kind, durable, autoDelete, internal, noWait, args)
}

// QueueDeclare mocks base method
func (m *MockConnection) QueueDeclare(name string, durable, autoDelete, internal, noWait bool, args amqp.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDeclare", name, durable, autoDelete, internal, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueDeclare indicates an expected call of QueueDeclare
func (mr *MockConnectionMockRecorder) QueueDeclare(name, durable, autoDelete, internal, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*MockConnection)(nil).QueueDeclare), name, durable, autoDelete, internal, noWait, args)
}

// QueueBind mocks base method
func (m *MockConnection) QueueBind(name, key, exchange string, noWait bool, args amqp.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueBind", name, key, exchange, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueBind indicates an expected call of QueueBind
func (mr *MockConnectionMockRecorder) QueueBind(name, key, exchange, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueBind", reflect.TypeOf((*MockConnection)(nil).QueueBind), name, key, exchange, noWait, args)
}

// Publish mocks base method
func (m *MockConnection) Publish(exchange, key string, mandatory, immediate bool, msg amqp.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", exchange, key, mandatory, immediate, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockConnectionMockRecorder) Publish(exchange, key, mandatory, immediate, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockConnection)(nil).Publish), exchange, key, mandatory, immediate, msg)
}

// Consume mocks base method
func (m *MockConnection) Consume(queue, consumer string, autoAck, exclusive, noLocal, noWait bool, args amqp.Table) (<-chan amqp.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume
func (mr *MockConnectionMockRecorder) Consume(queue, consumer, autoAck, exclusive, noLocal, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConnection)(nil).Consume), queue, consumer, autoAck, exclusive, noLocal, noWait, args)
}

// Run mocks base method
func (m *MockConnection) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockConnectionMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockConnection)(nil).Run))
}

// MockDeclare is a mock of Declare interface
type MockDeclare struct {
	ctrl     *gomock.Controller
	recorder *MockDeclareMockRecorder
}

// MockDeclareMockRecorder is the mock recorder for MockDeclare
type MockDeclareMockRecorder struct {
	mock *MockDeclare
}

// NewMockDeclare creates a new mock instance
func NewMockDeclare(ctrl *gomock.Controller) *MockDeclare {
	mock := &MockDeclare{ctrl: ctrl}
	mock.recorder = &MockDeclareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeclare) EXPECT() *MockDeclareMockRecorder {
	return m.recorder
}

// ExchangeDeclare mocks base method
func (m *MockDeclare) ExchangeDeclare(name, kind string, durable, autoDelete, internal, noWait bool, args amqp.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclare", name, kind, durable, autoDelete, internal, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare
func (mr *MockDeclareMockRecorder) ExchangeDeclare(name, kind, durable, autoDelete, internal, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockDeclare)(nil).ExchangeDeclare), name, kind, durable, autoDelete, internal, noWait, args)
}

// QueueDeclare mocks base method
func (m *MockDeclare) QueueDeclare(name string, durable, autoDelete, internal, noWait bool, args amqp.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDeclare", name, durable, autoDelete, internal, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueDeclare indicates an expected call of QueueDeclare
func (mr *MockDeclareMockRecorder) QueueDeclare(name, durable, autoDelete, internal, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*MockDeclare)(nil).QueueDeclare), name, durable, autoDelete, internal, noWait, args)
}

// MockBind is a mock of Bind interface
type MockBind struct {
	ctrl     *gomock.Controller
	recorder *MockBindMockRecorder
}

// MockBindMockRecorder is the mock recorder for MockBind
type MockBindMockRecorder struct {
	mock *MockBind
}

// NewMockBind creates a new mock instance
func NewMockBind(ctrl *gomock.Controller) *MockBind {
	mock := &MockBind{ctrl: ctrl}
	mock.recorder = &MockBindMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBind) EXPECT() *MockBindMockRecorder {
	return m.recorder
}

// QueueBind mocks base method
func (m *MockBind) QueueBind(name, key, exchange string, noWait bool, args amqp.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueBind", name, key, exchange, noWait, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueBind indicates an expected call of QueueBind
func (mr *MockBindMockRecorder) QueueBind(name, key, exchange, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueBind", reflect.TypeOf((*MockBind)(nil).QueueBind), name, key, exchange, noWait, args)
}

// MockChannel is a mock of Channel interface
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *MockChannelMockRecorder
}

// MockChannelMockRecorder is the mock recorder for MockChannel
type MockChannelMockRecorder struct {
	mock *MockChannel
}

// NewMockChannel creates a new mock instance
func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &MockChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChannel) EXPECT() *MockChannelMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockChannel) Publish(exchange, key string, mandatory, immediate bool, msg amqp.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", exchange, key, mandatory, immediate, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockChannelMockRecorder) Publish(exchange, key, mandatory, immediate, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockChannel)(nil).Publish), exchange, key, mandatory, immediate, msg)
}

// Consume mocks base method
func (m *MockChannel) Consume(queue, consumer string, autoAck, exclusive, noLocal, noWait bool, args amqp.Table) (<-chan amqp.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume
func (mr *MockChannelMockRecorder) Consume(queue, consumer, autoAck, exclusive, noLocal, noWait, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockChannel)(nil).Consume), queue, consumer, autoAck, exclusive, noLocal, noWait, args)
}
